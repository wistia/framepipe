// Generated by CoffeeScript 1.8.0
var FramePipe,
  __slice = [].slice;

FramePipe = (function() {
  function FramePipe(pipeType, dstFrame, uid) {
    this.pipeType = pipeType;
    this.dstFrame = dstFrame != null ? dstFrame : self;
    this.uid = uid;
    this._listeners = {};
    this.uid || (this.uid = FramePipe.uniqId('pipe_'));
    FramePipe.knownPipes[this.uid] = this;
    this.post('__hello__');
  }

  FramePipe.prototype.post = function(raw, callback) {
    return FramePipe.post(this.dstFrame, this.pipeType, this.uid, raw, callback);
  };

  FramePipe.prototype.ping = function() {
    return this.post('__ping__');
  };

  FramePipe.prototype.listen = function(listenerName, fn) {
    return this._listeners[listenerName] = fn;
  };

  FramePipe.prototype.unlisten = function(listenerName) {
    return delete this._listeners[listenerName];
  };

  FramePipe.prototype._flushListeners = function(msg) {
    var fn, listenerName, result, _ref, _results;
    _ref = this._listeners;
    _results = [];
    for (listenerName in _ref) {
      fn = _ref[listenerName];
      _results.push(result = fn(msg.message, msg));
    }
    return _results;
  };

  FramePipe.prototype.log = function() {
    var args;
    args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    return FramePipe.log.apply(FramePipe, [this.uid].concat(__slice.call(args)));
  };

  FramePipe.all = function() {
    var pipe, pipeUid, _ref, _results;
    _ref = this.knownPipes;
    _results = [];
    for (pipeUid in _ref) {
      pipe = _ref[pipeUid];
      _results.push(pipe);
    }
    return _results;
  };

  FramePipe.each = function(fn) {
    var pipe, pipeUid, _ref, _results;
    _ref = this.knownPipes;
    _results = [];
    for (pipeUid in _ref) {
      pipe = _ref[pipeUid];
      _results.push(fn(pipe));
    }
    return _results;
  };

  FramePipe._onFindQueue = {};

  FramePipe.onFind = function(pipeType, fn) {
    this._onFindQueue[pipeType] = this._onFindQueue[pipeType] || [];
    this._onFindQueue[pipeType].push(fn);
    return this.each(function(pipe) {
      if (pipe.pipeType === pipeType) {
        return fn(pipe);
      }
    });
  };

  FramePipe._flushFindQueue = function(pipeType, pipe) {
    var fn, _i, _len, _ref, _results;
    if (this._onFindQueue[pipeType]) {
      _ref = this._onFindQueue[pipeType];
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        fn = _ref[_i];
        _results.push(fn(pipe));
      }
      return _results;
    }
  };

  FramePipe.knownFrames = {};

  FramePipe.knownPipes = {};

  FramePipe.listen = function() {
    if (this._dispatcher) {
      return;
    }
    this._dispatcher = (function(_this) {
      return function(event) {
        var deserialized, frame, pipe, str;
        str = event.data;
        frame = event.source;
        if (_this.isValidMessage(str)) {
          deserialized = _this.deserializeMessage(str);
          if (deserialized.message === '__hello__') {
            if (!_this.knownFrames[deserialized.frameUid]) {
              _this.knownFrames[deserialized.frameUid] = frame;
            }
            if (deserialized.pipeUid && !_this.knownPipes[deserialized.pipeUid]) {
              pipe = new FramePipe(deserialized.pipeType, frame, deserialized.pipeUid);
              return _this._flushFindQueue(deserialized.pipeType, pipe);
            }
          } else if (deserialized.message === '__discover__') {
            return _this.each(function(pipe) {
              return pipe.post('__hello__');
            });
          } else if (pipe = _this.knownPipes[deserialized.pipeUid]) {
            if (deserialized.message === '__ping__') {
              return pipe.post('__pong__');
            } else {
              return pipe._flushListeners(deserialized);
            }
          } else {
            return _this.log("Unknown pipe " + deserialized.pipeUid, deserialized);
          }
        }
      };
    })(this);
    if (window.addEventListener) {
      return window.addEventListener('message', this._dispatcher);
    } else {
      return window.attachEvent('onmessage', this._dispatcher);
    }
  };

  FramePipe.stopListening = function() {
    if (!this._dispatcher) {
      return;
    }
    if (window.removeEventListener) {
      window.removeEventListener('message', this._dispatcher);
    } else {
      window.detachEvent('onmessage', this._dispatcher);
    }
    return this._dispatcher = null;
  };

  FramePipe.discover = function(frames) {
    var frame, _i, _len;
    if (frames == null) {
      frames = window.frames;
    }
    for (_i = 0, _len = frames.length; _i < _len; _i++) {
      frame = frames[_i];
      this.post(frame, null, null, '__discover__');
    }
  };

  FramePipe.post = function(frame, pipeType, pipeUid, raw, callback) {
    var messageUid, serialized, signed;
    messageUid = callback ? this.uniqId('msg_') : null;
    signed = this.signMessage(raw, pipeType, pipeUid, messageUid);
    serialized = this.serializeMessage(signed);
    frame.postMessage(serialized, '*');
    if (callback) {
      this.bindCallback(signed.messageUid, callback);
    }
  };

  FramePipe.version = 'FramePipe1';

  FramePipe.signMessage = function(raw, pipeType, pipeUid, messageUid) {
    return {
      version: this.version,
      frameUid: this.frameUid,
      pipeType: pipeType,
      pipeUid: pipeUid,
      messageUid: messageUid,
      message: raw
    };
  };

  FramePipe.serializeMessage = function(msg) {
    return [msg.version, msg.pipeType, msg.frameUid, msg.pipeUid, msg.messageUid].join(':') + "\n" + msg.message;
  };

  FramePipe.isValidMessage = function(str) {
    var sig;
    sig = this.deserializeSignature(str);
    return sig.version === this.version && sig.frameUid;
  };

  FramePipe.deserializeSignature = function(str) {
    var endOfFirstLineIndex, firstLine, frameUid, messageUid, pipeType, pipeUid, version, _ref;
    endOfFirstLineIndex = (typeof str.indexOf === "function" ? str.indexOf("\n") : void 0) || -1;
    firstLine = str.substring(0, endOfFirstLineIndex);
    _ref = str.split(':'), version = _ref[0], pipeType = _ref[1], frameUid = _ref[2], pipeUid = _ref[3], messageUid = _ref[4];
    return {
      version: version,
      pipeType: pipeType,
      frameUid: frameUid,
      pipeUid: pipeUid,
      messageUid: messageUid
    };
  };

  FramePipe.deserializeMessage = function(str) {
    var endOfFirstLineIndex, msg, result;
    result = this.deserializeSignature(str);
    endOfFirstLineIndex = str.indexOf("\n");
    msg = str.substring(endOfFirstLineIndex + 1, str.length);
    result.message = msg;
    return result;
  };

  FramePipe._callbacks = {};

  FramePipe.bindCallback = function(messageUid, callback) {
    var wrapped;
    wrapped = function() {
      var e;
      try {
        callback();
      } catch (_error) {
        e = _error;
        if (typeof e === 'string') {
          if (typeof console !== "undefined" && console !== null) {
            console.log(e);
          }
        } else {
          if (typeof console !== "undefined" && console !== null) {
            console.log(e.message);
          }
          if (typeof console !== "undefined" && console !== null) {
            console.log(e.stack);
          }
        }
      }
      return delete this._callbacks[messageUid];
    };
    return this._callbacks[messageUid] = wrapped;
  };

  FramePipe.uniqId = function(prefix) {
    var i;
    if (prefix == null) {
      prefix = '';
    }
    return prefix + ((function() {
      var _i, _results;
      _results = [];
      for (i = _i = 0; _i < 4; i = ++_i) {
        _results.push((Math.random() * Math.pow(36, 5) << 0).toString(36));
      }
      return _results;
    })()).join('');
  };

  FramePipe.initialize = function() {
    FramePipe.frameUid = FramePipe.uniqId('frame_');
    FramePipe.discover();
    return FramePipe.listen();
  };

  FramePipe.reset = function() {
    this.stopListening();
    this._callbacks = {};
    this._onFindQueue = {};
    this.knownPipes = {};
    return this.knownFrames = {};
  };

  FramePipe.isInitialized = function() {
    return !!FramePipe.frameUid;
  };

  FramePipe.log = function() {
    var args;
    args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    return typeof console !== "undefined" && console !== null ? console.log.apply(console, [location.pathname].concat(__slice.call(args))) : void 0;
  };

  return FramePipe;

})();

window.framePipeOptions || (window.framePipeOptions = {});

if (!FramePipe.isInitialized() && framePipeOptions.autoInitialize !== false) {
  FramePipe.initialize();
}
